function [J grad] = nnCostFunction(nn_params, ...
                                   input_layer_size, ...
                                   hidden_layer_size, ...
                                   num_labels, ...
                                   X, y, lambda)
%NNCOSTFUNCTION Implements the neural network cost function for a two layer
%neural network which performs classification
%   [J grad] = NNCOSTFUNCTON(nn_params, hidden_layer_size, num_labels, ...
%   X, y, lambda) computes the cost and gradient of the neural network. The
%   parameters for the neural network are "unrolled" into the vector
%   nn_params and need to be converted back into the weight matrices. 
% 
%   The returned parameter grad should be a "unrolled" vector of the
%   partial derivatives of the neural network.
%

% Reshape nn_params back into the parameters Theta1 and Theta2, the weight matrices
% for our 2 layer neural network
Theta1 = reshape(nn_params(1:hidden_layer_size * (input_layer_size + 1)), ...
                 hidden_layer_size, (input_layer_size + 1));

Theta2 = reshape(nn_params((1 + (hidden_layer_size * (input_layer_size + 1))):end), ...
                 num_labels, (hidden_layer_size + 1));

% Setup some useful variables
m = size(X, 1);

% You need to return the following variables correctly 
J = 0;
Theta1_grad = zeros(size(Theta1));
Theta2_grad = zeros(size(Theta2));

% ====================== YOUR CODE HERE ======================
% Instructions: You should complete the code by working through the
%               following parts.
%
% Part 1: Feedforward the neural network and return the cost in the
%         variable J. After implementing Part 1, you can verify that your
%         cost function computation is correct by verifying the cost
%         computed in ex4.m
%
% Part 2: Implement the backpropagation algorithm to compute the gradients
%         Theta1_grad and Theta2_grad. You should return the partial derivatives of
%         the cost function with respect to Theta1 and Theta2 in Theta1_grad and
%         Theta2_grad, respectively. After implementing Part 2, you can check
%         that your implementation is correct by running checkNNGradients
%
%         Note: The vector y passed into the function is a vector of labels
%               containing values from 1..K. You need to map this vector into a 
%               binary vector of 1's and 0's to be used with the neural network
%               cost function.
%
%         Hint: We recommend implementing backpropagation using a for-loop
%               over the training examples if you are implementing it for the 
%               first time.
%
% Part 3: Implement regularization with the cost function and gradients.
%
%         Hint: You can implement this around the code for
%               backpropagation. That is, you can compute the gradients for
%               the regularization separately and then add them to Theta1_grad
%               and Theta2_grad from Part 2.
%

% size(X) = 5000 x 400
% size(Theta1) = 25 x 401
% size(Theta2) = 10 x 26

a1 = [ones(m, 1) X]; % size(a1) = 5000 x 401
z2 = a1 * Theta1'; % size(z2) = 5000 x 25
a2 = [ones(m, 1) sigmoid(z2)]; % size(a2) = 5000 x 26
z3 = a2 * Theta2'; % size(z3) = 5000 x 10
h_x = a3 = sigmoid(z3); % size(h_x) = 5000 x 10

% Map the ground truth y to vectors of 0,1 values
yk = eye(num_labels)(y,:); % size(yk) = 5000 x 10

% We don't need the original thetas anymore so for correct
% regularization, let's set the bias column to 0.
Theta1(:,1) = 0;
Theta2(:,1) = 0;

cpos = log(h_x) .* yk; % size(cpos) = 5000 x 10
cneg = log(1-h_x) .* (1-yk); % size(cneg) = 5000 x 10
costs = (-1/m) * (cpos + cneg); % size(costs) = 5000 x 10
reg = (lambda / (2*m)) * (sum(sum(Theta1.^2)) + sum(sum(Theta2.^2)));
costs_per_label = sum(costs); % size(s1) = 1 x 10
J = sum(costs_per_label) + reg; % size(J) = 1 x 1

% Gradient calculation (vectorized)
d_3 = h_x - yk; % size(d_3) = 5000 x 10
d_2 = (d_3 * Theta2(:,2:end)) .* sigmoidGradient(z2); % size(d_2) = 5000 x 25

Delta1 = d_2' * a1; % size(Delta1) = size(Theta1_grad) = size(Theta1) = 25 x 401
Delta2 = d_3' * a2; % size(Delta2) = size(Theta2_grad) = size(Theta2) = 10 x 26

Theta1_grad = (1/m) * Delta1;
Theta2_grad = (1/m) * Delta2;

% Adding regularization except for the first (bias) column
Theta1_grad += ((lambda / m) * Theta1);
Theta2_grad += ((lambda / m) * Theta2);

% -------------------------------------------------------------

% =========================================================================

% Unroll gradients
grad = [Theta1_grad(:) ; Theta2_grad(:)];

end

%!shared il, hl, nl, nn, X, y, lambda, tol
%! il = 2;              % input layer
%! hl = 2;              % hidden layer
%! nl = 4;              % number of labels
%! nn = [ 1:18 ] / 10;  % nn_params
%! X = cos([1 2 ; 3 4 ; 5 6]);
%! y = [4; 2; 3];
%! lambda = 4;
%! tol = 5e-05;

%!test                  % testcase w/o regularization, lambda == 0
%! [J grad] = nnCostFunction(nn, il, hl, nl, X, y, 0);
%! assert(J, 7.4070, tol);
%! assert(grad, [0.766138; 0.979897; -0.027540; -0.035844; -0.024929; -0.053862; 0.883417; 0.568762; 0.584668; 0.598139; 0.459314; 0.344618; 0.256313; 0.311885; 0.478337; 0.368920; 0.259771; 0.322331], tol);

%!test
%! [J grad] = nnCostFunction(nn, il, hl, nl, X, y, lambda);
%! assert(J, 19.474, 5e-04);
%! assert(grad, [0.76614; 0.97990; 0.37246; 0.49749; 0.64174; 0.74614; 0.88342; 0.56876; 0.59814; 1.92598; 1.94462; 1.98965; 2.17855; 2.47834; 2.50225], tol);

